## Autogenerated by Scribe. DO NOT MODIFY.

name: Book
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/books-by-category/{category_id}'
    metadata:
      groupName: Book
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Fetch Books By category_id'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      category_id:
        name: category_id
        description: "The category's ID."
        required: true
        example: 82
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      category_id: 82
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters:
      category_id: 75
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":51,"name":"Totam et et libero quis.","rating_value":2,"rating_name":"Bad","category_id":6,"category_name":"Optio at eius qui ipsa."},{"id":52,"name":"Et saepe ut sint aut magnam.","rating_value":3,"rating_name":"Reasonable","category_id":6,"category_name":"Optio at eius qui ipsa."}]}'
        headers: []
        description: ''
        custom: []
      -
        status: 204
        content: ''
        headers: []
        description: 'No books found for the given category_id.'
        custom: []
      -
        status: 404
        content: '{"errors": [list]}'
        headers: []
        description: 'Category not found.'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/books/{book_id}'
    metadata:
      groupName: Book
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show Book'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'The ID of the book.'
        required: true
        example: 6
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      book_id: 6
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":51,"name":"Totam et et libero quis.","rating_value":2,"rating_name":"Bad","category_id":6,"category_name":"Optio at eius qui ipsa."}}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"errors": [list]}'
        headers: []
        description: 'Book not found.'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/books
    metadata:
      groupName: Book
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List All Books'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":51,"name":"Totam et et libero quis.","rating_value":2,"rating_name":"Bad","category_id":6,"category_name":"Optio at eius qui ipsa."},{"id":52,"name":"Et saepe ut sint aut magnam.","rating_value":3,"rating_name":"Reasonable","category_id":6,"category_name":"Optio at eius qui ipsa."}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3a6VPEcDdv5bf1a6hekZg48'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/books
    metadata:
      groupName: Book
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Store Book'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: yjmpcaowxzelbrymaenfmlocv
        type: string
        enumValues: []
        custom: []
      rating:
        name: rating
        description: 'Must be at least 1. Must not be greater than 5.'
        required: true
        example: 4
        type: integer
        enumValues: []
        custom: []
      category_id:
        name: category_id
        description: 'Must be at least 1.'
        required: true
        example: 78
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      name: yjmpcaowxzelbrymaenfmlocv
      rating: 4
      category_id: 78
    fileParameters: []
    responses:
      -
        status: 201
        content: '{"data":{"id":51,"name":"Totam et et libero quis.","rating_value":2,"rating_name":"Bad","category_id":6,"category_name":"Optio at eius qui ipsa."}}'
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: '{"errors": [list]}'
        headers: []
        description: 'Validation Errors.'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1vcEb86a54hgka3VDZ6edfP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/books/{book_id}'
    metadata:
      groupName: Book
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Book'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'The ID of the book.'
        required: true
        example: 3
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      book_id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'This field is required when none of <code>rating</code> and <code>category_id</code> are present. Must not be greater than 255 characters.'
        required: false
        example: gyovpgcypzhihoqmulfhp
        type: string
        enumValues: []
        custom: []
      rating:
        name: rating
        description: 'This field is required when none of <code>name</code> and <code>category_id</code> are present. Must be at least 1. Must not be greater than 5.'
        required: false
        example: 5
        type: integer
        enumValues: []
        custom: []
      category_id:
        name: category_id
        description: 'This field is required when none of <code>name</code> and <code>rating</code> are present. Must be at least 1.'
        required: false
        example: 57
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      name: gyovpgcypzhihoqmulfhp
      rating: 5
      category_id: 57
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":51,"name":"Totam et et libero quis.","rating_value":2,"rating_name":"Bad","category_id":6,"category_name":"Optio at eius qui ipsa."}}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"errors": [list]}'
        headers: []
        description: 'Book not found.'
        custom: []
      -
        status: 422
        content: '{"errors": [list]}'
        headers: []
        description: 'Validation Errors.'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer hVk61PDvcdZ6bE5g4faea83'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/books/{book_id}'
    metadata:
      groupName: Book
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Book'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'The ID of the book.'
        required: true
        example: 9
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      book_id: 9
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"errors": [list]}'
        headers: []
        description: 'Book not found.'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer k5vV1D6bdZE3h6faga84Pce'
    controller: null
    method: null
    route: null
    custom: []
