## Autogenerated by Scribe. DO NOT MODIFY.

name: Exemplar
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/exemplars/{exemplar_id}'
    metadata:
      groupName: Exemplar
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show Exemplar'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      exemplar_id:
        name: exemplar_id
        description: 'The ID of the exemplar.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      exemplar_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":5,"borrowable":1,"book_id":167,"book_name":"Quo sint qui corporis.","condition_value":2,"condition_name":"Good"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":"Object not found."}'
        headers: []
        description: 'Exemplar not found.'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/exemplars/list/{book_id}'
    metadata:
      groupName: Exemplar
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Fetch Exemplars by book_id'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: "The book's ID."
        required: true
        example: 831
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      book_id: 831
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      condition:
        name: condition
        description: 'optional Worst condition acceptable (1=LikeNew, 2=Good, 3=Worn, 4=Damaged).'
        required: false
        example: 2
        type: integer
        enumValues: []
        custom: []
      borrowable:
        name: borrowable
        description: 'optional Set it to false if unborrowable exemplars are acceptable to be listed. Default is true.'
        required: false
        example: true
        type: boolean
        enumValues: []
        custom: []
    cleanBodyParameters:
      book_id: 72
      condition: 2
      borrowable: true
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":337,"borrowable":1,"book_id":11,"book_name":"Qui saepe et nisi enim.","condition_value":1,"condition_name":"LikeNew"},{"id":487,"borrowable":1,"book_id":11,"book_name":"Qui saepe et nisi enim.","condition_value":2,"condition_name":"Good"}]}'
        headers: []
        description: ''
        custom: []
      -
        status: 204
        content: ''
        headers: []
        description: 'No exemplars found for the given book_id.'
        custom: []
      -
        status: 404
        content: '{"errors": [list]}'
        headers: []
        description: 'Book not found.'
        custom: []
      -
        status: 422
        content: '{"errors": [list]}'
        headers: []
        description: 'Validation Errors.'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/exemplars
    metadata:
      groupName: Exemplar
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create Exemplar'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      book_id:
        name: book_id
        description: 'Must be at least 1.'
        required: true
        example: 21
        type: integer
        enumValues: []
        custom: []
      condition:
        name: condition
        description: 'The actual condition (1=LikeNew, 2=Good, 3=Worn, 4=Damaged).'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
      borrowable:
        name: borrowable
        description: 'optional If false then this exemplar cannot leave the library. Default is true.'
        required: false
        example: true
        type: boolean
        enumValues: []
        custom: []
    cleanBodyParameters:
      book_id: 21
      condition: 1
      borrowable: true
    fileParameters: []
    responses:
      -
        status: 201
        content: '{"data":{"id":6,"borrowable":1,"book_id":167,"book_name":"Quo sint qui corporis.","condition_value":2,"condition_name":"Good"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: '{"errors": [list]}'
        headers: []
        description: 'Validation Errors.'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer D4bkhPg8cZ53E6af6Vdev1a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/exemplars/{exemplar_id}'
    metadata:
      groupName: Exemplar
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Exemplar'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      exemplar_id:
        name: exemplar_id
        description: 'The ID of the exemplar.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      exemplar_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      book_id:
        name: book_id
        description: 'This field is required when none of <code>condition</code>, <code>borrowable</code>, and <code>change_donor</code> are present. Must be at least 1.'
        required: false
        example: 70
        type: integer
        enumValues: []
        custom: []
      condition:
        name: condition
        description: 'This field is required when none of <code>book_id</code>, <code>borrowable</code>, and <code>change_donor</code> are present. Must be at least 1. Must not be greater than 4.'
        required: false
        example: 1
        type: integer
        enumValues: []
        custom: []
      borrowable:
        name: borrowable
        description: 'This field is required when none of <code>book_id</code>, <code>condition</code>, and <code>change_donor</code> are present.'
        required: false
        example: false
        type: boolean
        enumValues: []
        custom: []
      user_id:
        name: user_id
        description: 'This field is required when <code>change_donor</code> is <code>true</code>. Must be at least 1.'
        required: false
        example: 74
        type: integer
        enumValues: []
        custom: []
      change_donor:
        name: change_donor
        description: 'optional Set this field to true to update the donor. Default is false.'
        required: false
        example: false
        type: boolean
        enumValues: []
        custom: []
    cleanBodyParameters:
      book_id: 70
      condition: 1
      borrowable: false
      user_id: 74
      change_donor: false
    fileParameters: []
    responses:
      -
        status: 201
        content: '{"data":{"id":6,"borrowable":1,"book_id":167,"book_name":"Quo sint qui corporis.","condition_value":2,"condition_name":"Good"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":"Object not found."}'
        headers: []
        description: 'Exemplar not found.'
        custom: []
      -
        status: 422
        content: '{"errors": [list]}'
        headers: []
        description: 'Validation Errors.'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5cf31gkedVPaEhZ84vD6b6a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/exemplars/{exemplar_id}'
    metadata:
      groupName: Exemplar
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Exemplar'
      description: '<small class="badge badge-purple">admin</small>'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      exemplar_id:
        name: exemplar_id
        description: 'The ID of the exemplar.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      exemplar_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":"Object not found."}'
        headers: []
        description: 'Exemplar not found.'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer bd6Pha4EvZk685f1Da3Vceg'
    controller: null
    method: null
    route: null
    custom: []
